<!--
build.xml

Master ant build file for all Java software projects at LOCI.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.

===============================================================================
This build file handles the following projects:

Bio-Formats
    JAR file:      bio-formats.jar
    Folders:       loci/formats
                   loci/formats/* (except auto)
    Main class:    loci.formats.ImageViewer
    Project deps:  (None)
    External deps: bufr-1.1.00.jar (reflected)
                   clibwrapper_jiio.jar (reflected)
                   grib-5.1.03.jar (reflected)
                   jai_imageio.jar (reflected)
                   mdbtools-java.jar (reflected)
                   netcdf-4.0.jar (reflected)
                   ome-java.jar (reflected, except in loci/formats/ome)
                   poi-loci.jar (reflected)
                   slf4j-jdk14.jar (reflected)
    Targets:       style-formats
                   compile-formats
                   jar-formats
    License:       GPL

LOCI Plugins for ImageJ
    JAR file:      loci_plugins.jar
    Folders:       loci/plugins
                   loci/plugins/config
    Main class:    loci.plugins.About
    IJ plugins:    loci.plugins.Colorizer
                   loci.plugins.LociExporter
                   loci.plugins.LociFunctions
                   loci.plugins.LociImporter
                   loci.plugins.LociUploader
                   loci.plugins.ShortcutPanel
                   loci.plugins.Slicer
                   loci.plugins.config.LociConfig
    Project deps:  Bio-Formats
    External deps: forms-1.0.4.jar
    Targets:       style-loci-plugins
                   compile-loci-plugins
                   jar-loci-plugins
    License:       GPL

OME I/O
    JAR file:      ome-io.jar
    Folders:       loci/ome/io
    Main class:    loci.ome.io.OMEWriter
    Project deps:  Bio-Formats
    External deps: commons-httpclient-2.0-rc2.jar (ome-java.jar)
                   commons-logging.jar (ome-java.jar)
                   omero-client-3.0-Beta3.jar (reflected)
                   omero-common-3.0-Beta3.jar (reflected)
                   omero-importer-3.0-Beta3.jar (reflected)
                   omero-model-psql-3.0-Beta3.jar (reflected)
                   spring-2.5.jar (reflected)
                   jbossall-client-4.2.1.GA.jar (reflected)
                   xmlrpc-1.2-b1.jar (ome-java.jar)
    Targets:       style-omeio
                   compile-omeio
                   jar-omeio
    License:       GPL

OME Plugins for ImageJ
    JAR file:      ome_plugins.jar
    Folders:       loci/plugins/ome
    Main class:    loci.plugins.ome.About
    IJ plugins:    loci.plugins.LociImporter
                   loci.plugins.ome.LociUploader
    Project deps:  LOCI Plugins for ImageJ
                   OME I/O
    External deps: (None)
    Targets:       style-ome-plugins
                   compile-ome-plugins
                   jar-ome-plugins
    License:       GPL

VisBio
    JAR file:      visbio.jar
    Folders:       loci/visbio
                   loci/visbio/*
    Main class:    loci.visbio.VisBio
    Project deps:  Bio-Formats
                   OME I/O
    External deps: forms-1.0.4.jar
                   ij.jar
                   looks-1.2.2.jar
                   visad-lite.jar
    Targets:       style-visbio
                   compile-visbio
                   jar-visbio
                   source-visbio
                   docs-visbio
                   dist-visbio
    License:       GPL

Slim Plotter
    JAR file:      SlimPlotter.jar
    Folders:       loci/slim
                   some loci/visbio
    Main class:    loci.slim.SlimPlotter
    Project deps:  Bio-Formats
    External deps: lma.jar
                   visad-lite.jar
    Targets:       style-slim
                   compile-slim
                   jar-slim
                   dist-slim
    License:       GPL

LOCI Checkstyle checks
    JAR file:      loci-checks.jar
    Folders:       loci/checks
    Main class:    loci.checks.About
    Project deps:  (None)
    External deps: checkstyle-all-4.2.jar
    Targets:       style-checks
                   compile-checks
                   jar-checks
    License:       Public domain

===============================================================================
The following projects are considered "legacy" but still supported:

JVMLink
    JAR file:      jvmlink.jar
    Folder:        loci/jvmlink
                   some loci/formats
    Main class:    loci.jvmlink.JVMLinkServer
    Project deps:  (None)
    External deps: (None)
    Targets:       style-jvmlink
                   compile-jvmlink
                   jar-jvmlink
    License:       BSD

OME Notes
    JAR file:      ome-notes.jar
    Folder:        loci/ome/notes
    Main class:    loci.ome.notes.Notes
    Project deps:  Bio-Formats
    External deps: forms-1.0.4.jar
    Targets:       style-ome-notes
                   compile-ome-notes
                   jar-ome-notes
    License:       LGPL

OME Metadata Editor
    JAR file:      ome-editor.jar
    Folders:       loci/ome/editor
                   loci/ome/viewer
    Main class:    loci.ome.editor.MetadataEditor
    Project deps:  Bio-Formats
    External deps: forms-1.0.4.jar
                   looks-1.2.2.jar
    Targets:       style-ome-editor
                   compile-ome-editor
                   jar-ome-editor
    License:       LGPL

===============================================================================
The following external dependencies (in the jar folder) may be required:

Apple eAWT stubs
    JAR file:  AppleJavaExtensions.jar
    URL:       http://developer.apple.com/samplecode/AppleJavaExtensions/
    Notes:     required to compile VisBio on non-Mac OS X machines

Ant-Contrib
    JAR file:  ant-contrib-1.0b1.jar
    URL:       http://ant-contrib.sourceforge.net/
    Notes:     used by tools target to iterate over JAR files ("for" task)
    License:   Apache

Checkstyle
    JAR file:  checkstyle-all-4.2.jar
    URL:       http://checkstyle.sourceforge.net/
    Notes:     used by style targets to check source code style conventions
    License:   LGPL

Apache Jakarta Commons HttpClient
    JAR file:  commons-httpclient-2.0-rc2.jar
    URL:       http://jakarta.apache.org/commons/httpclient/
    Notes:     required for OME-Java to communicate with OME servers
    License:   Apache

Apache Jakarta Commons Logging
    JAR file:  commons-logging.jar
    URL:       http://jakarta.apache.org/commons/logging/
    Notes:     used by OME-Java
    License:   Apache

JGoodies Forms
    JAR file:  forms-1.0.4.jar
    URL:       http://www.jgoodies.com/freeware/forms/index.html
    Notes:     used for layout by VisBio, Data Browser and OME Notes
    License:   BSD

ImageJ
    JAR file:  ij.jar
    URL:       http://rsb.info.nih.gov/ij/
    Notes:     used by LOCI plugins for ImageJ and OME plugins for ImageJ;
               bundled with VisBio to achieve ImageJ interconnectivity
    License:   Public domain

Java Advanced Imaging Image I/O Tools
    JAR files: jai_imageio.jar, clibwrapper_jiio.jar
    URL:       https://jai-imageio.dev.java.net/
    Notes:     used by Bio-Formats via reflection for JPEG2000 support
               (ND2, JP2) and lossless JPEG decompression (DICOM)
    License:   BSD

JMagick
    JAR file:  jmagick.jar
    URL:       http://www.jmagick.org
    Notes:     required for JPEG-2000 support in Aperio SVS
    License:   LGPL

JUnit
    JAR file:  junit.jar
    URL:       http://www.junit.org/
    Notes:     unit testing framework used for a few VisBio unit tests
    License:   Common Public License

L-M Fit
    JAR file:  lma.jar
    URL:       http://users.utu.fi/jaolho/
    Notes:     Levenberg-Marquardt algorithm for exponential curve fitting,
               used by Slim Plotter
    License:   LGPL

JGoodies Looks
    JAR file:  looks-1.2.2.jar
    URL:       http://www.jgoodies.com/freeware/looks/index.html
    Notes:     used for a nicer Look & Feel by VisBio and OME Metadata Editor
    License:   BSD

MDB Tools (Java port)
    JAR file:  mdbtools-java.jar
    URLs:      http://mdbtools.sourceforge.net/
               http://sourceforge.net/forum/message.php?msg_id=2550619
    Notes:     used by Bio-Formats for Zeiss LSM metadata in MDB database files
    License:   LGPL

NetCDF
    JAR files: netcdf-4.0.jar, bufr-1.1.00.jar, grib-5.1.03.jar, slf4j-jdk14.jar
    URL:       http://www.unidata.ucar.edu/software/netcdf-java/
    Notes:     used by Bio-Formats via reflection for HDF support (Imaris 5.5)
    License:   LGPL

OME-Java
    JAR file:  ome-java.jar
    URL:       http://openmicroscopy.org/api/java/
    Notes:     used by Bio-Formats and OME Metadata Editor to work with OME-XML;
               used by OME I/O to connect to OME
    License:   LGPL

OMERO Client
    JAR file:  omero-client-3.0-Beta3.jar
    URL:       http://trac.openmicroscopy.org.uk/omero/wiki/MilestoneDownloads
    Notes:     used by OME I/O to connect to OMERO
    License:   GPL

OMERO Common
    JAR file:  omero-common-3.0-Beta3.jar
    URL:       http://trac.openmicroscopy.org.uk/omero/wiki/MilestoneDownloads
    Notes:     used by OME I/O to connect to OMERO
    License:   GPL

OMERO Importer
    JAR file:  omero-importer-3.0-Beta3.jar
    URL:       http://trac.openmicroscopy.org.uk/omero/wiki/MilestoneDownloads
    Notes:     used by OME I/O to connect to OMERO
    License:   GPL

OMERO Model PostgreSQL
    JAR file:  omero-model-psql-3.0-Beta3.jar
    URL:       http://trac.openmicroscopy.org.uk/omero/wiki/MilestoneDownloads
    Notes:     used by OME I/O to connect to OMERO
    License:   GPL

Spring
    JAR file:  spring-2.5.jar
    URL:       http://springframework.org
    Notes:     used by OME I/O to connect to OMERO
    License:   Apache

JBoss
    JAR file:  jbossall-client-4.2.1.GA.jar
    URL:       http://jboss.org
    Notes:     used by OME I/O to connect to OMERO
    License:   LGPL

Apache Jakarta POI
    JAR file:  poi-loci.jar
    URL:       http://jakarta.apache.org/poi/
    Notes:     based on poi-2.5.1-final-20040804.jar, with bugfixes for OLE v2
               and memory efficiency improvements;
               used by Bio-Formats via reflection for OLE support
               (CXD, IPW, OIB, ZVI);
               used by VisBio overlays logic for XLS export feature
    License:   Apache

Skin Look and Feel
    JAR file:  skinlf.jar
    URL:       http://skinlf.l2fprod.com/
    Notes:     not used (may be used in the future for flexible skinning)
    License:   Custom (BSD-like)

TestNG
    JAR file:  testng-5.7-jdk14.jar
    URL:       http://testng.org/
    Notes:     testing framework used for LOCI software automated test suite
    License:   Apache

VisAD
    JAR file:  visad-lite.jar
    URL:       http://www.ssec.wisc.edu/~billh/visad.html
    Notes:     stripped down VisAD library used by VisBio and Slim Plotter
               for interactive visualization
    License:   LGPL

Apache XML-RPC
    JAR file:  xmlrpc-1.2-b1.jar
    URL:       http://ws.apache.org/xmlrpc/
    Notes:     required for OME-Java to communicate with OME servers
    License:   Apache
-->

<project name="LOCI Software" default="jars" basedir=".">
  <description>
    Master build file for all Java software projects at LOCI
  </description>

  <property file="build.properties"/>
  <property file="${user.home}/.ant-global.properties"/>

  <condition property="isUnix"><os family="unix"/></condition>

  <!-- Non-core ant tasks -->

  <path id="cp-testng">
    <pathelement location="${classes.dir}"/>
    <fileset dir="jar">
      <include name="*.jar"/>
    </fileset>
  </path>

  <taskdef name="testng" classpathref="cp-testng"
    classname="org.testng.TestNGAntTask"/>

  <!-- NB - We do not reference build/jar/loci-checks.jar directly, as doing so
    causes loci-checks.jar to be locked by some file systems (Windows in
    particular), which causes the clean and clean-jars targets to fail. -->
  <taskdef resource="checkstyletask.properties"
    classpath="jar/checkstyle-all-4.2.jar:jar/loci-checks.jar"/>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties"
    classpath="jar/ant-contrib-1.0b1.jar"/>
  <!-- HACK - some environments do not install the antcontrib tasks properly
    from antcontrib.properties above; also load them from antlib.xml -->
  <taskdef resource="net/sf/antcontrib/antlib.xml"
    classpath="jar/ant-contrib-1.0b1.jar"/>

  <!--
  <taskdef resource="proguard/ant/task.properties"
    classpath="jar/proguard.jar"/>
  -->

  <!-- Global build targets -->

  <target name="init">
    <tstamp>
      <format property="DATE" pattern="d MMMMM yyyy"/>
      <format property="YEAR" pattern="yyyy"/>
    </tstamp>
  </target>

  <target name="style"
    depends="style-formats, style-loci-plugins,
      style-ome-io, style-ome-plugins,
      style-visbio, style-slim, style-checks,
      style-jvmlink, style-ome-notes, style-ome-editor"
    description="check source code style for LOCI software packages"/>

<!--
  <target name="compile" depends="copy-source"
    description="compile classes for LOCI software packages">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}" debug="true"
      classpath="${ext.jars}" deprecation="true" source="1.4" target="1.4"/>
  </target>
-->
  <target name="compile"
    depends="compile-formats, compile-loci-plugins,
      compile-ome-io, compile-ome-plugins,
      compile-visbio, compile-slim, compile-checks, compile-tests,
      compile-jvmlink, compile-ome-notes, compile-ome-editor"
    description="compile classes for LOCI software packages"/>

  <target name="jars"
    depends="jar-formats, jar-loci-plugins,
      jar-ome-io, jar-ome-plugins,
      jar-visbio, jar-slim, jar-checks,
      jar-jvmlink, jar-ome-notes, jar-ome-editor"
    description="generate JAR files for LOCI software packages"/>

  <target name="tools" depends="jars"
    description="create JAR file encompassing several LOCI tools">
    <for list="${loci-tools.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <available file="${jar.dir}/@{jar}" property="@{jar}.present"/>
        <if>
          <equals arg1="${@{jar}.present}" arg2="true" />
          <then>
            <unjar src="${jar.dir}/@{jar}" dest="${loci-tools.dir}">
              <patternset>
                <exclude name="META-INF/**"/>
              </patternset>
            </unjar>
          </then>
        </if>
      </sequential>
    </for>
    <jar jarfile="${jar.dir}/${loci-tools.jar}" basedir="${loci-tools.dir}">
      <manifest>
        <attribute name="Main-Class" value="${loci-tools.main}"/>
      </manifest>
    </jar>
    <delete dir="${loci-tools.dir}"/>
  </target>

  <target name="tools-ome" depends="jars"
    description="create JAR file encompassing several OME tools">
    <for list="${ome-tools.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <available file="${jar.dir}/@{jar}" property="@{jar}.present"/>
        <if>
          <equals arg1="${@{jar}.present}" arg2="true" />
          <then>
            <unjar src="${jar.dir}/@{jar}" dest="${ome-tools.dir}">
              <patternset>
                <exclude name="META-INF/**"/>
              </patternset>
            </unjar>
          </then>
        </if>
      </sequential>
    </for>
    <jar jarfile="${jar.dir}/${ome-tools.jar}" basedir="${ome-tools.dir}">
      <manifest>
        <attribute name="Main-Class" value="${ome-tools.main}"/>
      </manifest>
    </jar>
    <delete dir="${ome-tools.dir}"/>
  </target>

  <target name="docs" depends="copy-source"
    description="generate javadocs for LOCI software packages">
    <javadoc sourcepath="${dest.dir}" destdir="${docs.dir}/api"
      classpath="${ext.jars}" author="true" version="true" use="true"
      nodeprecated="true" windowtitle="LOCI Software API">
      <packageset dir="${dest.dir}"/>
      <doctitle><![CDATA[<h1>LOCI Software</h1>]]></doctitle>
      <bottom><![CDATA[${copyright.begin} ${YEAR} ${copyright.end}]]></bottom>
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
      <link href="http://www.ssec.wisc.edu/~dglo/docs/"/>
      <link href="http://rsbweb.nih.gov/ij/developer/api/"/>
      <link href="http://www.jdocs.com/formlayout/1.0.4/api/"/>
      <link href="http://www.jdocs.com/looks/1.2.2/api/"/>
    </javadoc>
  </target>

  <target name="clean" description="remove all build files">
    <delete dir="${build.dir}"/>
  </target>

  <target name="clean-classes" description="remove classes from build folder">
    <delete dir="${classes.dir}"/>
  </target>

  <target name="clean-dist"
    description="remove distribution bundles from build folder">
    <delete dir="${dist.dir}"/>
  </target>

  <target name="clean-docs" description="remove javadocs from build folder">
    <delete dir="${docs.dir}"/>
  </target>

  <target name="clean-jars" description="remove JAR files from build folder">
    <delete dir="${jar.dir}"/>
  </target>

  <target name="clean-src" description="remove source files from build folder">
    <delete dir="${dest.dir}"/>
  </target>

  <target name="dev-compile" description="compile classes in-place (no copy)">
    <!-- By default, source files should compile under Java 1.4 -->
    <javac srcdir="." destdir="." debug="true" classpath="${ext.jars}"
      deprecation="true" source="1.4" target="1.4"
      includes="loci/**" excludes="${java15.dirs}"/>
    <!-- Source files requiring Java 1.5 -->
    <javac srcdir="." destdir="." debug="true" classpath="${ext.jars}"
      deprecation="true" source="1.5" target="1.5" includes="${java15.dirs}"/>
  </target>

  <target name="dev-clean" description="remove classes in-place (no copy)">
    <delete>
      <fileset dir="." includes="loci/**/*.class"/>
    </delete>
  </target>

  <target name="test-all" depends="compile"
    description="run all automated tests">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="all" testname="All tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-config" depends="compile"
    description="generate config files for automated test suite">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="config" testname="Config generation"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-fast" depends="compile"
    description="run automated tests in group 'fast'">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="fast" testname="Fast tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-Xmx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-pixels" depends="compile"
    description="run automated tests in group 'pixels'">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="pixels" testname="Pixels tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-Xmx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-xml" depends="compile"
    description="run automated tests in group 'xml'">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="xml" testname="XML tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-Xmx${testng.memory}"/>
    </testng>
  </target>

  <!-- Internal build targets -->

  <target name="copy-source" depends="init,
    copy-resources-formats, copy-resources-loci-plugins,
    copy-resources-visbio, copy-resources-checks,
    copy-resources-ome-notes, copy-resources-ome-editor">
    <!-- copy binary files without filtering -->
    <copy todir="${dest.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="loci/**"
        excludes="**/*.java **/*.config **/*.txt ${ignore.source}"/>
    </copy>
    <!-- copy source files with filtering -->
    <filter token="date" value="${DATE}"/>
    <filter token="year" value="${YEAR}"/>
    <filter token="visbio.version" value="${visbio.version}"/>
    <copy todir="${dest.dir}" filtering="true" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="loci/**"
        excludes="${ignore.source}"/>
    </copy>
  </target>

  <target name="copy-jars">
    <!-- copy needed external JARs into build jars folder -->
    <copy todir="${jar.dir}" preservelastmodified="true">
      <fileset dir="jar"/>
    </copy>
  </target>

  <!-- Bio-Formats -->

  <target name="copy-resources-formats">
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="${formats.resources}"/>
    </copy>
  </target>

  <target name="style-formats" depends="copy-source"
    description="check source code style for Bio-Formats">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${formats.source}"/>
    </checkstyle>
  </target>

  <target name="compile-formats" depends="copy-source"
    description="compile classes for Bio-Formats">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${formats.source}" excludes="${formats.source-exclude}"
      classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-formats" depends="compile-formats, copy-jars"
    description="generate JAR file for Bio-Formats">
    <mkdir dir="${jar.dir}"/>
    <jar jarfile="${jar.dir}/${formats.jar}" basedir="${classes.dir}"
      includes="${formats.files}">
      <manifest>
        <attribute name="Main-Class" value="${formats.main}"/>
        <attribute name="Class-Path" value="${formats.classpath}"/>
      </manifest>
    </jar>
  </target>

  <!-- LOCI Plugins for ImageJ -->

  <target name="copy-resources-loci-plugins">
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="${loci-plugins.resources}"/>
    </copy>
  </target>

  <target name="style-loci-plugins" depends="copy-source"
    description="check source code style for LOCI Plugins for ImageJ">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${loci-plugins.source}"/>
    </checkstyle>
  </target>

  <target name="compile-loci-plugins" depends="copy-source, compile-formats"
    description="compile classes for LOCI Plugins for ImageJ">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${loci-plugins.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-loci-plugins"
    depends="compile-loci-plugins, copy-jars, jar-formats"
    description="generate JAR file for LOCI Plugins for ImageJ">
    <jar jarfile="${jar.dir}/${loci-plugins.jar}"
      basedir="${src.dir}/${loci-plugins.extra-root}"
      includes="${loci-plugins.extra-files}">
      <manifest>
        <attribute name="Main-Class" value="${loci-plugins.main}"/>
      </manifest>
    </jar>
    <jar jarfile="${jar.dir}/${loci-plugins.jar}" basedir="${classes.dir}"
      includes="${loci-plugins.files}" update="true">
    </jar>
  </target>

  <!-- OME I/O -->

  <target name="style-ome-io" depends="copy-source"
    description="check source code style for OME I/O">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${ome-io.source}"/>
    </checkstyle>
  </target>

  <target name="compile-ome-io" depends="copy-source, compile-formats"
    description="compile classes for OME I/O">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${ome-io.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-ome-io" depends="compile-ome-io, copy-jars, jar-formats"
    description="generate JAR file for OME I/O">
    <jar jarfile="${jar.dir}/${ome-io.jar}" basedir="${classes.dir}"
      includes="${ome-io.files}">
      <manifest>
        <attribute name="Main-Class" value="${ome-io.main}"/>
        <!--<attribute name="Class-Path" value="${ome-io.classpath}"/>-->
      </manifest>
    </jar>
  </target>

  <!-- OME Plugins for ImageJ -->

  <target name="copy-resources-ome-plugins">
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="${ome-plugins.resources}"/>
    </copy>
  </target>

  <target name="style-ome-plugins" depends="copy-source"
    description="check source code style for OME Plugins for ImageJ">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${ome-plugins.source}"/>
    </checkstyle>
  </target>

  <target name="compile-ome-plugins"
    depends="copy-source, compile-loci-plugins, compile-ome-io"
    description="compile classes for OME Plugins for ImageJ">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${ome-plugins.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-ome-plugins"
    depends="compile-ome-plugins, copy-jars, jar-loci-plugins, jar-ome-io"
    description="generate JAR file for OME Plugins for ImageJ">
    <jar jarfile="${jar.dir}/${ome-plugins.jar}"
      basedir="${src.dir}/${ome-plugins.extra-root}"
      includes="${ome-plugins.extra-files}">
      <manifest>
        <attribute name="Main-Class" value="${ome-plugins.main}"/>
      </manifest>
    </jar>
    <jar jarfile="${jar.dir}/${ome-plugins.jar}" basedir="${classes.dir}"
      includes="${ome-plugins.files}" update="true">
    </jar>
  </target>

  <!-- VisBio -->

  <target name="copy-resources-visbio">
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="${visbio.resources}"/>
    </copy>
  </target>

  <target name="style-visbio" depends="copy-source"
    description="check source code style for VisBio">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${visbio.source}"/>
    </checkstyle>
  </target>

  <target name="compile-visbio"
    depends="copy-source, compile-formats, compile-ome-io"
    description="compile classes for VisBio">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${visbio.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-visbio"
    depends="compile-visbio, copy-jars, jar-formats, jar-ome-io"
    description="generate JAR file for VisBio">
    <jar jarfile="${jar.dir}/${visbio.jar}" basedir="${classes.dir}"
      includes="${visbio.files}">
      <manifest>
        <attribute name="Main-Class" value="${visbio.main}"/>
        <attribute name="Class-Path" value="${visbio.classpath}"/>
      </manifest>
    </jar>
  </target>

  <target name="source-visbio" depends="copy-source"
    description="generate source bundle for VisBio">
    <zip zipfile="${build.dir}/visbio_src.zip" basedir="${dest.dir}"
      includes="loci/visbio/**"/>
  </target>

  <target name="docs-visbio" depends="copy-source"
    description="generate javadocs for VisBio">
    <javadoc sourcepath="${dest.dir}" destdir="${visbio.docs-dir}/docs/api"
      classpath="${ext.jars}" author="true" version="true" use="true"
      nodeprecated="true" windowtitle="LOCI Software API">
      <packageset dir="${dest.dir}" includes="loci/visbio/**"/>
      <doctitle><![CDATA[<h1>VisBio</h1>]]></doctitle>
      <bottom><![CDATA[${copyright.begin} ${YEAR} ${copyright.end}]]></bottom>
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
      <link href="http://www.ssec.wisc.edu/~dglo/docs/"/>
      <link href="http://rsbweb.nih.gov/ij/developer/api/"/>
      <link href="http://www.jdocs.com/formlayout/1.0.4/api/"/>
      <link href="http://www.jdocs.com/looks/1.2.2/api/"/>
    </javadoc>
    <zip zipfile="${build.dir}/visbio_docs.zip" basedir="${visbio.docs-dir}"/>
  </target>

  <target name="dist-visbio"
    depends="dist-visbio-win32, dist-visbio-win32-nojre, dist-visbio-macosx,
      dist-visbio-linux, dist-visbio-nojre"
    description="create distribution bundles for VisBio"/>

  <target name="dist-visbio-win32" depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: Windows w/ JRE">
    <copy todir="${visbio.win32-dir}/VisBio" preservelastmodified="true">
      <fileset dir="dist/visbio/win32"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <fixcrlf srcdir="${visbio.win32-dir}/VisBio" eol="dos"
      includes="${visbio.text-files}"/>
    <untar src="dist/jre-win32.tar.gz" dest="${visbio.win32-dir}/VisBio"
      overwrite="false" compression="gzip"/>
    <zip destfile="${dist.dir}/visbio${visbio.version}_win32.zip"
      basedir="${visbio.win32-dir}"/>
  </target>

  <target name="dist-visbio-win32-nojre" depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: Windows no JRE">
    <copy todir="${visbio.win32-nojre-dir}/VisBio"
      preservelastmodified="true">
      <fileset dir="dist/visbio/win32" excludes="launcher.cfg"/>
      <fileset dir="dist/visbio/win32-nojre"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <fixcrlf srcdir="${visbio.win32-nojre-dir}/VisBio" eol="dos"
      includes="${visbio.text-files}"/>
    <zip destfile="${dist.dir}/visbio${visbio.version}_win32_nojre.zip"
      basedir="${visbio.win32-nojre-dir}"/>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-visbio-macosx" if="isUnix"
    depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: Mac OS X">
    <copy todir="${visbio.macosx-dir}/VisBio"
      preservelastmodified="true">
      <fileset dir="dist/visbio/macosx"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
    </copy>
    <fixcrlf srcdir="${visbio.macosx-dir}/VisBio" eol="mac"
      includes="${visbio.text-files}"/>
    <!-- HACK - copy does not preserve permissions; chmod them back -->
    <chmod perm="+x">
      <fileset dir="${visbio.macosx-dir}/VisBio"
        includes="${visbio.macosx-exec}"/>
    </chmod>
    <copy
      todir="${visbio.macosx-dir}/VisBio/VisBio.app/Contents/Resources/Java">
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <!--<tar destfile="${dist.dir}/visbio${visbio.version}_macosx.tar.gz"
      basedir="${visbio.macosx-dir}" compression="gzip"/>-->
    <!-- HACK - tar does not preserve permissions; use exec instead -->
    <echo>Building tar: visbio${visbio.version}_macosx.tar.gz</echo>
    <exec executable="tar">
      <arg value="czf"/>
      <arg value="${dist.dir}/visbio${visbio.version}_macosx.tar.gz"/>
      <arg value="-C"/>
      <arg value="${visbio.macosx-dir}"/>
      <arg value="VisBio"/>
    </exec>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-visbio-linux" if="isUnix"
    depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: Linux w/ JRE">
    <copy todir="${visbio.linux-dir}/visbio${visbio.version}"
      preservelastmodified="true">
      <fileset dir="dist/visbio/linux"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <fixcrlf srcdir="${visbio.linux-dir}/visbio${visbio.version}" eol="unix"
      includes="${visbio.text-files}"/>
    <!-- HACK - copy does not preserve permissions; chmod them back -->
    <chmod perm="+x">
      <fileset dir="${visbio.linux-dir}/visbio${visbio.version}"
        includes="${visbio.linux-exec}"/>
    </chmod>
    <!--<untar src="dist/jre-linux.tar.gz"
      dest="${visbio.linux-dir}/visbio${visbio.version}"
      overwrite="false" compression="gzip"/>-->
    <!-- HACK - untar does not restore permissions; use exec instead -->
    <echo>Expanding: jre-linux.tar.gz</echo>
    <exec executable="tar">
      <arg value="xzf"/>
      <arg value="dist/jre-linux.tar.gz"/>
      <arg value="-C"/>
      <arg value="${visbio.linux-dir}/visbio${visbio.version}"/>
    </exec>
    <!--<tar destfile="${dist.dir}/visbio${visbio.version}_linux.tar.gz"
      basedir="${visbio.linux-dir}" compression="gzip"/>-->
    <!-- HACK - tar does not preserve permissions; use exec instead -->
    <echo>Building tar: visbio${visbio.version}_linux.tar.gz</echo>
    <exec executable="tar">
      <arg value="czf"/>
      <arg value="${dist.dir}/visbio${visbio.version}_linux.tar.gz"/>
      <arg value="-C"/>
      <arg value="${visbio.linux-dir}"/>
      <arg value="visbio${visbio.version}"/>
    </exec>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-visbio-nojre" if="isUnix"
    depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: cross-platform">
    <copy todir="${visbio.nojre-dir}/visbio${visbio.version}"
      preservelastmodified="true">
      <fileset dir="dist/visbio/linux"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <fixcrlf srcdir="${visbio.nojre-dir}/visbio${visbio.version}" eol="unix"
      includes="${visbio.text-files}"/>
    <!-- HACK - copy does not preserve permissions; chmod them back -->
    <chmod perm="+x">
      <fileset dir="${visbio.nojre-dir}/visbio${visbio.version}"
        includes="${visbio.linux-exec}"/>
    </chmod>
    <!--<tar destfile="${dist.dir}/visbio${visbio.version}.tar.gz"
      basedir="${visbio.nojre-dir}" compression="gzip"/>-->
    <!-- HACK - tar does not preserve permissions; use exec instead -->
    <echo>Building tar: visbio${visbio.version}.tar.gz</echo>
    <exec executable="tar">
      <arg value="czf"/>
      <arg value="${dist.dir}/visbio${visbio.version}.tar.gz"/>
      <arg value="-C"/>
      <arg value="${visbio.nojre-dir}"/>
      <arg value="visbio${visbio.version}"/>
    </exec>
  </target>

  <!-- Slim Plotter -->

  <target name="style-slim" depends="copy-source"
    description="check source code style for Slim Plotter">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${slim.source}"/>
    </checkstyle>
  </target>

  <target name="compile-slim" depends="copy-source, compile-formats"
    description="compile classes for Slim Plotter">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${slim.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-slim" depends="compile-slim, copy-jars, jar-formats"
    description="generate JAR file for Slim Plotter">
    <jar jarfile="${jar.dir}/${slim.jar}" basedir="${classes.dir}"
      includes="${slim.files}">
      <manifest>
        <attribute name="Main-Class" value="${slim.main}"/>
        <attribute name="Class-Path" value="${slim.classpath}"/>
      </manifest>
    </jar>
  </target>

  <target name="dist-slim" if="isUnix"
    depends="copy-jars, jar-formats, jar-slim"
    description="create distribution bundle for Slim Plotter">
    <copy todir="${slim.dist-dir}" preservelastmodified="true">
      <fileset dir="dist/slim"/>
      <fileset dir="${jar.dir}" includes="${slim.jar} ${slim.classpath}"/>
    </copy>
    <!-- HACK - copy does not preserve permissions; chmod them back -->
    <chmod perm="+x">
      <fileset dir="${slim.dist-dir}" includes="${slim.exec}"/>
    </chmod>
    <!--<zip destfile="${dist.dir}/slim.zip" basedir="${dist.dir}/slim"/>-->
    <!-- HACK - zip does not preserve permissions; use exec instead -->
    <exec executable="zip" dir="${dist.dir}/slim">
      <arg value="-r9"/>
      <arg value="../slim.zip"/>
      <arg value="SlimPlotter"/>
    </exec>
  </target>

  <!-- LOCI Checkstyle checks -->

  <target name="copy-resources-checks">
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="${checks.resources}"/>
    </copy>
  </target>

  <target name="style-checks" depends="copy-source"
    description="check source code style for LOCI Checkstyle checks">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${checks.source}"/>
    </checkstyle>
  </target>

  <target name="compile-checks" depends="copy-source"
    description="compile classes for LOCI Checkstyle checks">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${checks.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-checks" depends="compile-checks, copy-jars"
    description="generate JAR file for LOCI Checkstyle checks">
    <jar jarfile="${jar.dir}/${checks.jar}" basedir="${classes.dir}"
      includes="${checks.files}">
      <manifest>
        <attribute name="Main-Class" value="${checks.main}"/>
        <attribute name="Class-Path" value="${checks.classpath}"/>
      </manifest>
    </jar>
  </target>

  <!-- Automated tests -->

  <target name="style-tests" depends="copy-source"
    description="check source code style for testing framework">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${tests.source}"/>
    </checkstyle>
  </target>

  <target name="compile-tests" depends="copy-source"
    description="compile classes for testing framework">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${tests.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <!-- JVMLink -->

  <target name="style-jvmlink" depends="copy-source"
    description="check source code style for JVMLink">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${jvmlink.source}"/>
    </checkstyle>
  </target>

  <target name="compile-jvmlink" depends="copy-source, compile-formats"
    description="compile classes for JVMLink">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${jvmlink.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-jvmlink"
    depends="compile-jvmlink, copy-jars"
    description="generate JAR file for JVMLink">
    <jar jarfile="${jar.dir}/${jvmlink.jar}" basedir="${classes.dir}"
      includes="${jvmlink.files}">
      <manifest>
        <attribute name="Main-Class" value="${jvmlink.main}"/>
        <!--<attribute name="Class-Path" value="${jvmlink.classpath}"/>-->
      </manifest>
    </jar>
  </target>

  <!-- OME Notes -->

  <target name="copy-resources-ome-notes">
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="${ome-notes.resources}"/>
    </copy>
  </target>

  <target name="style-ome-notes" depends="copy-source"
    description="check source code style for OME Notes">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${ome-notes.source}"/>
    </checkstyle>
  </target>

  <target name="compile-ome-notes" depends="copy-source, compile-formats"
    description="compile classes for OME Notes">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${ome-notes.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-ome-notes"
    depends="compile-ome-notes, copy-jars, jar-formats"
    description="generate JAR file for OME Notes">
    <jar jarfile="${jar.dir}/${ome-notes.jar}" basedir="${classes.dir}"
      includes="${ome-notes.files}">
      <manifest>
        <attribute name="Main-Class" value="${ome-notes.main}"/>
        <attribute name="Class-Path" value="${ome-notes.classpath}"/>
      </manifest>
    </jar>
  </target>

  <!-- OME Metadata Editor -->

  <target name="copy-resources-ome-editor">
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="${ome-editor.resources}"/>
    </copy>
  </target>

  <target name="style-ome-editor" depends="copy-source"
    description="check source code style for OME Metadata Editor">
    <checkstyle config="checkstyle.xml" failOnViolation="false">
      <fileset dir="${dest.dir}" includes="${ome-editor.source}"/>
    </checkstyle>
  </target>

  <target name="compile-ome-editor" depends="copy-source, compile-formats"
    description="compile classes for OME Metadata Editor">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${dest.dir}" destdir="${classes.dir}"
      includes="${ome-editor.source}" classpath="${ext.jars}"
      debug="true" deprecation="true" source="1.4" target="1.4"/>
  </target>

  <target name="jar-ome-editor"
    depends="compile-ome-editor, copy-jars, jar-formats"
    description="generate JAR file for OME Metadata Editor">
    <jar jarfile="${jar.dir}/${ome-editor.jar}" basedir="${classes.dir}"
      includes="${ome-editor.files}">
      <manifest>
        <attribute name="Main-Class" value="${ome-editor.main}"/>
        <attribute name="Class-Path" value="${ome-editor.classpath}"/>
      </manifest>
    </jar>
  </target>

</project>
