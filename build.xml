<!--
build.xml

Master ant build file for all Java software projects at LOCI.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.

===============================================================================
This build file handles the following components.
For more information on a component, see the
build.properties file in that component's subtree.

OME-XML Java library
    A library for working with OME-XML metadata structures
    -=-
    JAR file:      ome-xml.jar
    Path:          components/ome-xml
    Project deps:  (none)
    License:       GPL

Bio-Formats
    A library for reading and writing popular microscopy file formats
    -=-
    JAR file:      bio-formats.jar
    Path:          components/bio-formats
    Project deps:  OME-XML Java library
    License:       GPL

LOCI Plugins for ImageJ
    A collection of plugins for ImageJ, including the Bio-Formats Importer,
    Bio-Formats Exporter, Bio-Formats Macro Extensions, Data Browser, Stack
    Colorizer and Stack Slicer
    -=-
    JAR file:      loci_plugins.jar
    Path:          components/loci-plugins
    Project deps:  Bio-Formats
    License:       GPL

OME I/O
    A library for OME database import, upload and download
    -=-
    JAR file:      ome-io.jar
    Path:          components/ome-io
    Project deps:  Bio-Formats
    License:       GPL

OME Plugins for ImageJ
    A collection of plugins for ImageJ, including the
    Download from OME and Upload to OME plugins
    -=-
    JAR file:      ome_plugins.jar
    Path:          components/ome-plugins
    Project deps:  LOCI Plugins, OME I/O
    License:       GPL

VisBio
    A multi-purpose biological analysis tool
    -=-
    JAR file:      visbio.jar
    Path:          components/visbio
    Project deps:  Bio-Formats, OME I/O
    License:       GPL

Slim Plotter
    An application and curve fitting library for visualization
    and analysis of combined spectral lifetime data
    -=-
    JAR file:      SlimPlotter.jar
    Path:          components/slim-plotter
    Project deps:  Bio-Formats, VisBio
    License:       GPL

WiscScan Flow Cytometry
    Server application for flow cytometry with WiscScan using JVMLink
    -=-
    JAR file:      flow-cytometry.jar
    Path:          components/flow-cytometry
    Project deps:  Bio-Formats
    License:       BSD

LOCI Checkstyle checks
    LOCI's Checkstyle extensions, for checking source code style
    -=-
    JAR file:      loci-checks.jar
    Path:          components/checkstyle
    Project deps:  (none)
    License:       Public domain

LOCI testing framework
    Framework for automated and manual testing of the LOCI software packages
    -=-
    JAR file:      loci-testing-framework.jar
    Path:          components/test-suite
    Project deps:  Bio-Formats
    License:       BSD

===============================================================================
The following projects are considered "legacy" but still supported:

JVMLink
    A library for communicating between a Java Virtual Machine and other
    programs (e.g., C++ applications) via IP over localhost (or remotely)
    -=-
    JAR file:      jvmlink.jar
    Path:          components/legacy/jvmlink
    Project deps:  Bio-Formats
    License:       BSD

Multi-LUT
    A demo application for visually exploring multi-spectral image data
    -=-
    JAR file:      MultiLUT.jar
    Path:          components/legacy/multi-lut
    Project deps:  (None)
    License:       Public domain

OME Notes
    A library for flexible organization and presentation of OME-XML
    metadata within a graphical browser and editor interface
    -=-
    JAR file:      ome-notes.jar
    Path:          components/legacy/ome-notes
    Project deps:  Bio-Formats
    License:       LGPL

OME Metadata Editor
    An application for exploration and editing of OME-XML and OME-TIFF metadata
    -=-
    JAR file:      ome-editor.jar
    Path:          components/legacy/ome-editor
    Project deps:  Bio-Formats
    License:       LGPL

===============================================================================
The following external dependencies (in the jar folder) may be required:

Apple eAWT stubs
    JAR file:  AppleJavaExtensions.jar
    URL:       http://developer.apple.com/samplecode/AppleJavaExtensions/
    Notes:     required to compile VisBio on non-Mac OS X machines

Ant-Contrib
    JAR file:  ant-contrib-1.0b1.jar
    URL:       http://ant-contrib.sourceforge.net/
    Notes:     used by tools target to iterate over JAR files ("for" task)
    License:   Apache

Checkstyle
    JAR file:  checkstyle-all-4.2.jar
    URL:       http://checkstyle.sourceforge.net/
    Notes:     used by style targets to check source code style conventions
    License:   LGPL

Apache Jakarta Commons HttpClient
    JAR file:  commons-httpclient-2.0-rc2.jar
    URL:       http://jakarta.apache.org/commons/httpclient/
    Notes:     required for OME-Java to communicate with OME servers
    License:   Apache

Apache Jakarta Commons Logging
    JAR file:  commons-logging.jar
    URL:       http://jakarta.apache.org/commons/logging/
    Notes:     used by OME-Java
    License:   Apache

JGoodies Forms
    JAR file:  forms-1.0.4.jar
    URL:       http://www.jgoodies.com/freeware/forms/index.html
    Notes:     used for layout by VisBio, Data Browser and OME Notes
    License:   BSD

ImageJ
    JAR file:  ij.jar
    URL:       http://rsb.info.nih.gov/ij/
    Notes:     used by LOCI plugins for ImageJ and OME plugins for ImageJ;
               bundled with VisBio to achieve ImageJ interconnectivity
    License:   Public domain

Java Advanced Imaging Image I/O Tools
    JAR files: jai_imageio.jar, clibwrapper_jiio.jar
    URL:       https://jai-imageio.dev.java.net/
    Notes:     used by Bio-Formats via reflection for JPEG2000 support
               (ND2, JP2) and lossless JPEG decompression (DICOM)
    License:   BSD

JMagick
    JAR file:  jmagick.jar
    URL:       http://www.jmagick.org
    Notes:     required for JPEG-2000 support in Aperio SVS
    License:   LGPL

JUnit
    JAR file:  junit.jar
    URL:       http://www.junit.org/
    Notes:     unit testing framework used for a few VisBio unit tests
    License:   Common Public License

L-M Fit
    JAR file:  lma.jar
    URL:       http://users.utu.fi/jaolho/
    Notes:     Levenberg-Marquardt algorithm for exponential curve fitting,
               used by Slim Plotter
    License:   LGPL

JGoodies Looks
    JAR file:  looks-1.2.2.jar
    URL:       http://www.jgoodies.com/freeware/looks/index.html
    Notes:     used for a nicer Look & Feel by VisBio and OME Metadata Editor
    License:   BSD

MDB Tools (Java port)
    JAR file:  mdbtools-java.jar
    URLs:      http://mdbtools.sourceforge.net/
               http://sourceforge.net/forum/message.php?msg_id=2550619
    Notes:     used by Bio-Formats for Zeiss LSM metadata in MDB database files
    License:   LGPL

NetCDF
    JAR files: netcdf-4.0.jar, bufr-1.1.00.jar, grib-5.1.03.jar, slf4j-jdk14.jar
    URL:       http://www.unidata.ucar.edu/software/netcdf-java/
    Notes:     used by Bio-Formats via reflection for HDF support (Imaris 5.5)
    License:   LGPL

OME-Java
    JAR file:  ome-java.jar
    URL:       http://www.openmicroscopy.org/site/documents/data-management/ome-server/developer/java-api
    Notes:     used by OME I/O to connect to OME
    License:   LGPL

OMERO Client
    JAR file:  omero-client-3.0-Beta3.jar
    URL:       http://trac.openmicroscopy.org.uk/omero/wiki/MilestoneDownloads
    Notes:     used by OME I/O to connect to OMERO
    License:   GPL

OMERO Common
    JAR file:  omero-common-3.0-Beta3.jar
    URL:       http://trac.openmicroscopy.org.uk/omero/wiki/MilestoneDownloads
    Notes:     used by OME I/O to connect to OMERO
    License:   GPL

OMERO Importer
    JAR file:  omero-importer-3.0-Beta3.jar
    URL:       http://trac.openmicroscopy.org.uk/omero/wiki/MilestoneDownloads
    Notes:     used by OME I/O to connect to OMERO
    License:   GPL

OMERO Model PostgreSQL
    JAR file:  omero-model-psql-3.0-Beta3.jar
    URL:       http://trac.openmicroscopy.org.uk/omero/wiki/MilestoneDownloads
    Notes:     used by OME I/O to connect to OMERO
    License:   GPL

Spring
    JAR file:  spring-2.5.jar
    URL:       http://springframework.org
    Notes:     used by OME I/O to connect to OMERO
    License:   Apache

JBoss
    JAR file:  jbossall-client-4.2.1.GA.jar
    URL:       http://jboss.org
    Notes:     used by OME I/O to connect to OMERO
    License:   LGPL

Apache Jakarta POI
    JAR file:  poi-loci.jar
    URL:       http://jakarta.apache.org/poi/
    Notes:     based on poi-2.5.1-final-20040804.jar, with bugfixes for OLE v2
               and memory efficiency improvements;
               used by Bio-Formats via reflection for OLE support
               (CXD, IPW, OIB, ZVI);
               used by VisBio overlays logic for XLS export feature
    License:   Apache

Skin Look and Feel
    JAR file:  skinlf.jar
    URL:       http://skinlf.l2fprod.com/
    Notes:     not used (may be used in the future for flexible skinning)
    License:   Custom (BSD-like)

TestNG
    JAR file:  testng-5.7-jdk14.jar
    URL:       http://testng.org/
    Notes:     testing framework used for LOCI software automated test suite
    License:   Apache

VisAD
    JAR file:  visad-lite.jar
    URL:       http://www.ssec.wisc.edu/~billh/visad.html
    Notes:     stripped down VisAD library used by VisBio and Slim Plotter
               for interactive visualization
    License:   LGPL

Apache XML-RPC
    JAR file:  xmlrpc-1.2-b1.jar
    URL:       http://ws.apache.org/xmlrpc/
    Notes:     required for OME-Java to communicate with OME servers
    License:   Apache
-->

<project name="LOCI Software" default="jars" basedir=".">
  <description>
    Master build file for all Java software projects at LOCI
  </description>

  <property file="${user.home}/.ant-global.properties"/>
  <property file="global.properties"/>
  <property file="build.properties"/>

  <condition property="isUnix"><os family="unix"/></condition>

  <!-- Non-core ant tasks -->

<!--
  <path id="cp-testng">
    <pathelement location="${classes.dir}"/>
    <fileset dir="jar">
      <include name="*.jar"/>
    </fileset>
  </path>

  <taskdef name="testng" classpathref="cp-testng"
    classname="org.testng.TestNGAntTask"/>
-->

  <taskdef resource="net/sf/antcontrib/antcontrib.properties"
    classpath="jar/ant-contrib-1.0b1.jar"/>
  <!-- HACK - some environments do not install the antcontrib tasks properly
    from antcontrib.properties above; also load them from antlib.xml -->
  <taskdef resource="net/sf/antcontrib/antlib.xml"
    classpath="jar/ant-contrib-1.0b1.jar"/>

  <!-- Global build targets -->

  <target name="style"
    depends="style-ome-xml, style-formats, style-loci-plugins,
      style-ome-io, style-ome-plugins,
      style-visbio, style-slim, style-flow,
      style-checks, style-tests,
      style-jvmlink, style-multi-lut,
      style-ome-notes, style-ome-editor"
    description="check source code style for LOCI software packages"/>

  <target name="compile"
    depends="compile-ome-xml, compile-formats, compile-loci-plugins,
      compile-ome-io, compile-ome-plugins,
      compile-visbio, compile-slim, compile-flow,
      compile-checks, compile-tests,
      compile-jvmlink, compile-multi-lut,
      compile-ome-notes, compile-ome-editor"
    description="compile classes for LOCI software packages"/>

  <target name="jars"
    depends="jar-ome-xml, jar-formats, jar-loci-plugins,
      jar-ome-io, jar-ome-plugins,
      jar-visbio, jar-slim, jar-flow,
      jar-checks, jar-tests,
      jar-jvmlink, jar-multi-lut,
      jar-ome-notes, jar-ome-editor"
    description="generate JAR files for LOCI software packages"/>

  <target name="clean"
    depends="clean-ome-xml, clean-formats, clean-loci-plugins,
      clean-ome-io, clean-ome-plugins,
      clean-visbio, clean-slim, clean-flow,
      clean-checks, clean-tests,
      clean-jvmlink, clean-multi-lut,
      clean-ome-notes, clean-ome-editor"
    description="remove all build files"/>

  <target name="docs" depends="compile"
    description="generate javadocs for LOCI software packages">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
    </tstamp>
    <javadoc sourcepath="${merged-docs.source}"
      classpath="${merged-docs.classpath}"
      destdir="${merged-docs.dir}/api"
      author="true" version="true" use="true"
      nodeprecated="true" windowtitle="LOCI Software API">
      <doctitle><![CDATA[<h1>LOCI Software</h1>]]></doctitle>
      <bottom><![CDATA[${copyright.begin} ${YEAR} ${copyright.end}]]></bottom>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
      <link href="http://hudson.openmicroscopy.org.uk/job/OMEJAVA/javadoc/"/>
      <link href="http://rsbweb.nih.gov/ij/developer/api/"/>
      <link href="http://www.ssec.wisc.edu/~dglo/docs/"/>
      <!--<link href="http://www.jdocs.com/formlayout/1.0.4/api/"/>-->
      <!--<link href="http://www.jdocs.com/looks/1.2.2/api/"/>-->
    </javadoc>
  </target>

  <!-- OME-XML Java library -->

  <target name="style-ome-xml"
    description="check source code style for OME-XML Java library">
    <ant dir="components/bio-ome-xml" target="ome-xml.style"/>
  </target>

  <target name="compile-ome-xml"
    description="compile classes for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.compile"/>
  </target>

  <target name="jar-ome-xml"
    description="generate JAR file for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.jar"/>
  </target>

  <target name="clean-ome-xml"
    description="remove build files for OME-XML Java library">
    <ant dir="components/ome-xml" target="ome-xml.clean"/>
  </target>

  <!-- Bio-Formats -->

  <target name="style-formats"
    description="check source code style for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.style"/>
  </target>

  <target name="compile-formats"
    description="compile classes for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.compile"/>
  </target>

  <target name="jar-formats"
    description="generate JAR file for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.jar"/>
  </target>

  <target name="clean-formats"
    description="remove build files for Bio-Formats">
    <ant dir="components/bio-formats" target="formats.clean"/>
  </target>

  <!-- LOCI Plugins for ImageJ -->

  <target name="style-loci-plugins"
    description="check source code style for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.style"/>
  </target>

  <target name="compile-loci-plugins"
    description="compile classes for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.compile"/>
  </target>

  <target name="jar-loci-plugins"
    description="generate JAR file for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.jar"/>
  </target>

  <target name="clean-loci-plugins"
    description="remove build files for LOCI Plugins for ImageJ">
    <ant dir="components/loci-plugins" target="loci-plugins.clean"/>
  </target>

  <!-- OME I/O -->

  <target name="style-ome-io"
    description="check source code style for OME I/O">
    <ant dir="components/ome-io" target="ome-io.style"/>
  </target>

  <target name="compile-ome-io"
    description="compile classes for OME I/O">
    <ant dir="components/ome-io" target="ome-io.compile"/>
  </target>

  <target name="jar-ome-io"
    description="generate JAR file for OME I/O">
    <ant dir="components/ome-io" target="ome-io.jar"/>
  </target>

  <target name="clean-ome-io"
    description="remove build files for OME I/O">
    <ant dir="components/ome-io" target="ome-io.clean"/>
  </target>

  <!-- OME Plugins for ImageJ -->

  <target name="style-ome-plugins"
    description="check source code style for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.style"/>
  </target>

  <target name="compile-ome-plugins"
    description="compile classes for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.compile"/>
  </target>

  <target name="jar-ome-plugins"
    description="generate JAR file for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.jar"/>
  </target>

  <target name="clean-ome-plugins"
    description="remove build files for OME Plugins for ImageJ">
    <ant dir="components/ome-plugins" target="ome-plugins.clean"/>
  </target>

  <!-- VisBio -->

  <target name="style-visbio"
    description="check source code style for VisBio">
    <ant dir="components/visbio" target="visbio.style"/>
  </target>

  <target name="compile-visbio"
    description="compile classes for VisBio">
    <ant dir="components/visbio" target="visbio.compile"/>
  </target>

  <target name="jar-visbio"
    description="generate JAR file for VisBio">
    <ant dir="components/visbio" target="visbio.jar"/>
  </target>

  <target name="clean-visbio"
    description="remove build files for VisBio">
    <ant dir="components/visbio" target="visbio.clean"/>
  </target>

  <!-- Slim Plotter -->

  <target name="style-slim"
    description="check source code style for SLIM Plotter">
    <ant dir="components/slim-plotter" target="slim.style"/>
  </target>

  <target name="compile-slim"
    description="compile classes for SLIM Plotter">
    <ant dir="components/slim-plotter" target="slim.compile"/>
  </target>

  <target name="jar-slim"
    description="generate JAR file for SLIM Plotter">
    <ant dir="components/slim-plotter" target="slim.jar"/>
  </target>

  <target name="clean-slim"
    description="remove build files for SLIM Plotter">
    <ant dir="components/slim-plotter" target="slim.clean"/>
  </target>

  <!-- WiscScan Flow Cytometry -->

  <target name="style-flow"
    description="check source code style for WiscScan Flow Cytometry">
    <ant dir="components/flow-cytometry" target="flow.style"/>
  </target>

  <target name="compile-flow"
    description="compile classes for WiscScan Flow Cytometry">
    <ant dir="components/flow-cytometry" target="flow.compile"/>
  </target>

  <target name="jar-flow"
    description="generate JAR file for WiscScan Flow Cytometry">
    <ant dir="components/flow-cytometry" target="flow.jar"/>
  </target>

  <target name="clean-flow"
    description="remove build files for WiscScan Flow Cytometry">
    <ant dir="components/flow-cytometry" target="flow.clean"/>
  </target>

  <!-- LOCI Checkstyle checks -->

  <target name="style-checks"
    description="check source code style for LOCI Checkstyle checks">
    <ant dir="components/checkstyle" target="checks.style"/>
  </target>

  <target name="compile-checks"
    description="compile classes for LOCI Checkstyle checks">
    <ant dir="components/checkstyle" target="checks.compile"/>
  </target>

  <target name="jar-checks"
    description="generate JAR file for LOCI Checkstyle checks">
    <ant dir="components/checkstyle" target="checks.jar"/>
  </target>

  <target name="clean-checks"
    description="remove build files for LOCI Checkstyle checks">
    <ant dir="components/checkstyle" target="checks.clean"/>
  </target>

  <!-- LOCI testing framework -->

  <target name="style-tests"
    description="check source code style for LOCI testing framework">
    <ant dir="components/test-suite" target="tests.style"/>
  </target>

  <target name="compile-tests"
    description="compile classes for LOCI testing framework">
    <ant dir="components/test-suite" target="tests.compile"/>
  </target>

  <target name="jar-tests"
    description="generate JAR file for LOCI testing framework">
    <ant dir="components/test-suite" target="tests.jar"/>
  </target>

  <target name="clean-tests"
    description="remove build files for LOCI testing framework">
    <ant dir="components/test-suite" target="tests.clean"/>
  </target>

  <!-- JVMLink -->

  <target name="style-jvmlink"
    description="check source code style for JVMLink">
    <ant dir="components/legacy/jvmlink" target="jvmlink.style"/>
  </target>

  <target name="compile-jvmlink"
    description="compile classes for JVMLink">
    <ant dir="components/legacy/jvmlink" target="jvmlink.compile"/>
  </target>

  <target name="jar-jvmlink"
    description="generate JAR file for JVMLink">
    <ant dir="components/legacy/jvmlink" target="jvmlink.jar"/>
  </target>

  <target name="clean-jvmlink"
    description="remove build files for JVMLink">
    <ant dir="components/legacy/jvmlink" target="jvmlink.clean"/>
  </target>

  <!-- Multi LUT app -->

  <target name="style-multi-lut"
    description="check source code style for Multi LUT app">
    <ant dir="components/legacy/multi-lut" target="multi-lut.style"/>
  </target>

  <target name="compile-multi-lut"
    description="compile classes for Multi LUT app">
    <ant dir="components/legacy/multi-lut" target="multi-lut.compile"/>
  </target>

  <target name="jar-multi-lut"
    description="generate JAR file for Multi LUT app">
    <ant dir="components/legacy/multi-lut" target="multi-lut.jar"/>
  </target>

  <target name="clean-multi-lut"
    description="remove build files for Multi LUT app">
    <ant dir="components/legacy/multi-lut" target="multi-lut.clean"/>
  </target>

  <!-- OME Notes -->

  <target name="style-ome-notes"
    description="check source code style for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.style"/>
  </target>

  <target name="compile-ome-notes"
    description="compile classes for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.compile"/>
  </target>

  <target name="jar-ome-notes"
    description="generate JAR file for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.jar"/>
  </target>

  <target name="clean-ome-notes"
    description="remove build files for OME Notes">
    <ant dir="components/legacy/ome-notes" target="ome-notes.clean"/>
  </target>

  <!-- OME Metadata Editor -->

  <target name="style-ome-editor"
    description="check source code style for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.style"/>
  </target>

  <target name="compile-ome-editor"
    description="compile classes for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.compile"/>
  </target>

  <target name="jar-ome-editor"
    description="generate JAR file for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.jar"/>
  </target>

  <target name="clean-ome-editor"
    description="remove build files for OME Metadata Editor">
    <ant dir="components/legacy/ome-editor" target="ome-editor.clean"/>
  </target>

  <!-- Tool bundles -->

  <target name="tools" depends="jars"
    description="create JAR file encompassing several LOCI tools">
    <for list="${loci-tools.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <for list="${jar.dirs}" param="jardir" delimiter=" " trim="true">
          <sequential>
            <available file="@{jardir}/@{jar}"
              property="@{jardir}.@{jar}.present"/>
            <if>
              <equals arg1="${@{jardir}.@{jar}.present}" arg2="true" />
              <then>
                <unjar src="@{jardir}/@{jar}" dest="${loci-tools.dir}">
                  <patternset>
                    <exclude name="META-INF/**"/>
                  </patternset>
                </unjar>
              </then>
            </if>
          </sequential>
        </for>
      </sequential>
    </for>
    <jar jarfile="${loci-tools.jar}" basedir="${loci-tools.dir}">
      <manifest>
        <attribute name="Main-Class" value="${loci-tools.main}"/>
      </manifest>
    </jar>
    <delete dir="${loci-tools.dir}"/>
  </target>

  <target name="tools-ome" depends="jars"
    description="create JAR file encompassing several OME tools">
    <for list="${ome-tools.libraries}" param="jar" delimiter=" " trim="true">
      <sequential>
        <for list="${jar.dirs}" param="jardir" delimiter=" " trim="true">
          <sequential>
            <available file="@{jardir}/@{jar}"
              property="@{jardir}.@{jar}.present"/>
            <if>
              <equals arg1="${@{jardir}.@{jar}.present}" arg2="true" />
              <then>
                <unjar src="@{jardir}/@{jar}" dest="${ome-tools.dir}">
                  <patternset>
                    <exclude name="META-INF/**"/>
                  </patternset>
                </unjar>
              </then>
            </if>
          </sequential>
        </for>
      </sequential>
    </for>
    <jar jarfile="${ome-tools.jar}" basedir="${ome-tools.dir}">
      <manifest>
        <attribute name="Main-Class" value="${ome-tools.main}"/>
      </manifest>
    </jar>
    <delete dir="${ome-tools.dir}"/>
  </target>

  <!-- TODO - rework targets below this point -->

  <!-- Test targets -->

<!--
  <target name="test-all" depends="compile"
    description="run all automated tests">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="all" testname="All tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-config" depends="compile"
    description="generate config files for automated test suite">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="config" testname="Config generation"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-fast" depends="compile"
    description="run automated tests in group 'fast'">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="fast" testname="Fast tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-Xmx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-pixels" depends="compile"
    description="run automated tests in group 'pixels'">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="pixels" testname="Pixels tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-Xmx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-xml" depends="compile"
    description="run automated tests in group 'xml'">
    <testng classpathref="cp-testng" sourceDir="${dest.dir}"
      annotations="Javadoc" groups="xml" testname="XML tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="LOCI software test suite">
      <classfileset dir="${classes.dir}" includes="${testng.classes}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-Xmx${testng.memory}"/>
    </testng>
  </target>
-->

  <target name="dist-visbio"
    depends="dist-visbio-win32, dist-visbio-win32-nojre, dist-visbio-macosx,
      dist-visbio-linux, dist-visbio-nojre"
    description="create distribution bundles for VisBio"/>

  <target name="dist-visbio-win32" depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: Windows w/ JRE">
    <copy todir="${visbio.win32-dir}/VisBio" preservelastmodified="true">
      <fileset dir="dist/visbio/win32"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <fixcrlf srcdir="${visbio.win32-dir}/VisBio" eol="dos"
      includes="${visbio.text-files}"/>
    <untar src="dist/jre-win32.tar.gz" dest="${visbio.win32-dir}/VisBio"
      overwrite="false" compression="gzip"/>
    <zip destfile="${dist.dir}/visbio${visbio.version}_win32.zip"
      basedir="${visbio.win32-dir}"/>
  </target>

  <target name="dist-visbio-win32-nojre" depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: Windows no JRE">
    <copy todir="${visbio.win32-nojre-dir}/VisBio"
      preservelastmodified="true">
      <fileset dir="dist/visbio/win32" excludes="launcher.cfg"/>
      <fileset dir="dist/visbio/win32-nojre"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <fixcrlf srcdir="${visbio.win32-nojre-dir}/VisBio" eol="dos"
      includes="${visbio.text-files}"/>
    <zip destfile="${dist.dir}/visbio${visbio.version}_win32_nojre.zip"
      basedir="${visbio.win32-nojre-dir}"/>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-visbio-macosx" if="isUnix"
    depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: Mac OS X">
    <copy todir="${visbio.macosx-dir}/VisBio"
      preservelastmodified="true">
      <fileset dir="dist/visbio/macosx"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
    </copy>
    <fixcrlf srcdir="${visbio.macosx-dir}/VisBio" eol="mac"
      includes="${visbio.text-files}"/>
    <!-- HACK - copy does not preserve permissions; chmod them back -->
    <chmod perm="+x">
      <fileset dir="${visbio.macosx-dir}/VisBio"
        includes="${visbio.macosx-exec}"/>
    </chmod>
    <copy
      todir="${visbio.macosx-dir}/VisBio/VisBio.app/Contents/Resources/Java">
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <!--<tar destfile="${dist.dir}/visbio${visbio.version}_macosx.tar.gz"
      basedir="${visbio.macosx-dir}" compression="gzip"/>-->
    <!-- HACK - tar does not preserve permissions; use exec instead -->
    <echo>Building tar: visbio${visbio.version}_macosx.tar.gz</echo>
    <exec executable="tar">
      <arg value="czf"/>
      <arg value="${dist.dir}/visbio${visbio.version}_macosx.tar.gz"/>
      <arg value="-C"/>
      <arg value="${visbio.macosx-dir}"/>
      <arg value="VisBio"/>
    </exec>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-visbio-linux" if="isUnix"
    depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: Linux w/ JRE">
    <copy todir="${visbio.linux-dir}/visbio${visbio.version}"
      preservelastmodified="true">
      <fileset dir="dist/visbio/linux"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <fixcrlf srcdir="${visbio.linux-dir}/visbio${visbio.version}" eol="unix"
      includes="${visbio.text-files}"/>
    <!-- HACK - copy does not preserve permissions; chmod them back -->
    <chmod perm="+x">
      <fileset dir="${visbio.linux-dir}/visbio${visbio.version}"
        includes="${visbio.linux-exec}"/>
    </chmod>
    <!--<untar src="dist/jre-linux.tar.gz"
      dest="${visbio.linux-dir}/visbio${visbio.version}"
      overwrite="false" compression="gzip"/>-->
    <!-- HACK - untar does not restore permissions; use exec instead -->
    <echo>Expanding: jre-linux.tar.gz</echo>
    <exec executable="tar">
      <arg value="xzf"/>
      <arg value="dist/jre-linux.tar.gz"/>
      <arg value="-C"/>
      <arg value="${visbio.linux-dir}/visbio${visbio.version}"/>
    </exec>
    <!--<tar destfile="${dist.dir}/visbio${visbio.version}_linux.tar.gz"
      basedir="${visbio.linux-dir}" compression="gzip"/>-->
    <!-- HACK - tar does not preserve permissions; use exec instead -->
    <echo>Building tar: visbio${visbio.version}_linux.tar.gz</echo>
    <exec executable="tar">
      <arg value="czf"/>
      <arg value="${dist.dir}/visbio${visbio.version}_linux.tar.gz"/>
      <arg value="-C"/>
      <arg value="${visbio.linux-dir}"/>
      <arg value="visbio${visbio.version}"/>
    </exec>
  </target>

  <!-- HACK - limit OS to *nix due to file permission issues -->
  <target name="dist-visbio-nojre" if="isUnix"
    depends="jar-visbio, jar-formats"
    description="create distribution bundle for VisBio: cross-platform">
    <copy todir="${visbio.nojre-dir}/visbio${visbio.version}"
      preservelastmodified="true">
      <fileset dir="dist/visbio/linux"/>
      <fileset dir="loci/visbio" includes="${visbio.dist-files}"/>
      <fileset dir="${jar.dir}" includes="${visbio.jar} ${visbio.classpath}"/>
    </copy>
    <fixcrlf srcdir="${visbio.nojre-dir}/visbio${visbio.version}" eol="unix"
      includes="${visbio.text-files}"/>
    <!-- HACK - copy does not preserve permissions; chmod them back -->
    <chmod perm="+x">
      <fileset dir="${visbio.nojre-dir}/visbio${visbio.version}"
        includes="${visbio.linux-exec}"/>
    </chmod>
    <!--<tar destfile="${dist.dir}/visbio${visbio.version}.tar.gz"
      basedir="${visbio.nojre-dir}" compression="gzip"/>-->
    <!-- HACK - tar does not preserve permissions; use exec instead -->
    <echo>Building tar: visbio${visbio.version}.tar.gz</echo>
    <exec executable="tar">
      <arg value="czf"/>
      <arg value="${dist.dir}/visbio${visbio.version}.tar.gz"/>
      <arg value="-C"/>
      <arg value="${visbio.nojre-dir}"/>
      <arg value="visbio${visbio.version}"/>
    </exec>
  </target>

  <target name="dist-slim" if="isUnix"
    depends="jar-formats, jar-slim"
    description="create distribution bundle for Slim Plotter">
    <copy todir="${slim.dist-dir}" preservelastmodified="true">
      <fileset dir="dist/slim"/>
      <fileset dir="${jar.dir}" includes="${slim.jar} ${slim.classpath}"/>
    </copy>
    <!-- HACK - copy does not preserve permissions; chmod them back -->
    <chmod perm="+x">
      <fileset dir="${slim.dist-dir}" includes="${slim.exec}"/>
    </chmod>
    <!--<zip destfile="${dist.dir}/slim.zip" basedir="${dist.dir}/slim"/>-->
    <!-- HACK - zip does not preserve permissions; use exec instead -->
    <exec executable="zip" dir="${dist.dir}/slim">
      <arg value="-r9"/>
      <arg value="../slim.zip"/>
      <arg value="SlimPlotter"/>
    </exec>
  </target>

</project>
