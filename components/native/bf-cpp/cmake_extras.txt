find_package(Java REQUIRED)

### build some examples for testing bfcpp ###

add_executable(showinf ../source/showinf.cpp)

target_link_libraries(showinf bfcpp jace "${JAVA_JVM_LIBRARY}")

add_executable(minimum_writer ../source/minimum_writer.cpp)

target_link_libraries(minimum_writer bfcpp jace "${JAVA_JVM_LIBRARY}")

### post-build copies to dist dir ###
if(NOT DEFINED BioFormatsImageIO_JACE_DIR)
  set(BioFormatsImageIO_JACE_DIR jace)
endif(NOT DEFINED BioFormatsImageIO_JACE_DIR)

if(NOT DEFINED BioFormatsImageIO_ARTIFACT_DIR)
  set(BioFormatsImageIO_ARTIFACT_DIR ../../../../../artifacts)
endif(NOT DEFINED BioFormatsImageIO_ARTIFACT_DIR)

if(NOT DEFINED BioFormatsImageIO_DIST_DIR)
  set(BioFormatsImageIO_DIST_DIR dist/bf-cpp)
endif(NOT DEFINED BioFormatsImageIO_DIST_DIR)

if(NOT DEFINED BF_BUILD_TYPE)
  set(BF_BUILD_TYPE "")
endif(NOT DEFINED BF_BUILD_TYPE)

if(NOT DEFINED BF_LIB_PREFIX)
  set(BF_LIB_PREFIX lib)
endif(NOT DEFINED BF_LIB_PREFIX)

if(APPLE)

 if(NOT DEFINED BF_SUFFIX)
   set(BF_SUFFIX .dylib)
 endif(NOT DEFINED BF_SUFFIX)

 if(NOT DEFINED BF_JNI_SUFFIX)
   set(BF_JNI_SUFFIX .jnilib)
 endif(NOT DEFINED BF_JNI_SUFFIX)

 if(NOT DEFINED BF_EXE_SUFFIX)
   set(BF_EXE_SUFFIX "")
 endif(NOT DEFINED BF_EXE_SUFFIX)

endif(APPLE)

if(UNIX)

 if(NOT DEFINED BF_SUFFIX)

   set(BF_SUFFIX .so)

 endif(NOT DEFINED BF_SUFFIX)

 if(NOT DEFINED BF_EXE_SUFFIX)
   set(BF_EXE_SUFFIX "")
 endif(NOT DEFINED BF_EXE_SUFFIX)

endif(UNIX)

if(WIN32)
   set(BF_LIB_PREFIX "")
   set(BF_BUILD_TYPE /Release)

# Building in Debug mode is not currently supported in this script
#  set(BF_BUILD TYPE /Debug)

  if(NOT DEFINED BF_SUFFIX)

    set(BF_SUFFIX .dll)

  endif(NOT DEFINED BF_SUFFIX)

 if(NOT DEFINED BF_EXE_SUFFIX)
   set(BF_EXE_SUFFIX .exe)
 endif(NOT DEFINED BF_EXE_SUFFIX)

endif(WIN32)

if(WIN64)
  set(BF_LIB_PREFIX "")
  set(BF_BUILD_TYPE /Release)

#  Builing with Debug mode on Windows is not currently supported in this script.
#  set(BF_BUILD TYPE /Debug)

  if(NOT DEFINED BF_SUFFIX)

    set(BF_SUFFIX .dll)

  endif(NOT DEFINED BF_SUFFIX)

 if(NOT DEFINED BF_EXE_SUFFIX)
   set(BF_SUFFIX )
 endif(NOT DEFINED BF_EXE_SUFFIX)

endif(WIN64)


if(APPLE)
#make a .dylib version of libjace
  add_custom_command(
    TARGET bfcpp
    DEPENDS "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/{BF_LIB_PREFIX}jace${BF_JNI_SUFFIX}"
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
    "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/${BF_LIB_PREFIX}jace${BF_JNI_SUFFIX}"
    "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/${BF_LIB_PREFIX}jace${BF_SUFFIX}"
    VERBATIM
  )

  add_custom_command(
    TARGET bfcpp
    DEPENDS "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/{BF_LIB_PREFIX}jace${BF_JNI_SUFFIX}"
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
    "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/${BF_LIB_PREFIX}jace${BF_JNI_SUFFIX}"
    "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/${BF_LIB_PREFIX}jace${BF_JNI_SUFFIX}"
    VERBATIM
  )
  install(FILES
    "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/${BF_LIB_PREFIX}jace${BF_JNI_SUFFIX}"
    DESTINATION "${BioFormatsImageIO_DIST_DIR}"
  )

  add_custom_command(
    TARGET bfcpp
    DEPENDS "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/{BF_LIB_PREFIX}jace${BF_JNI_SUFFIX}"
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
    "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/${BF_LIB_PREFIX}jace${BF_JNI_SUFFIX}"
    "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/${BF_LIB_PREFIX}jace${BF_SUFFIX}"
    VERBATIM
  )
  install(FILES
    "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/${BF_LIB_PREFIX}jace${BF_SUFFIX}"
    DESTINATION "${BioFormatsImageIO_DIST_DIR}"
  )
endif(APPLE)

#copy libjace
add_custom_command(
  TARGET bfcpp
  DEPENDS "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/${BF_LIB_PREFIX}jace${BF_SUFFIX}"
  POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_JACE_DIR}${BF_BUILD_TYPE}/${BF_LIB_PREFIX}jace${BF_SUFFIX}"
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/${BF_LIB_PREFIX}jace${BF_SUFFIX}"
  VERBATIM
)
install(FILES
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/${BF_LIB_PREFIX}jace${BF_SUFFIX}"
  DESTINATION "${BioFormatsImageIO_DIST_DIR}"
)

#copy minimum_writer
add_custom_command(
  TARGET minimum_writer
  DEPENDS "${CMAKE_BINARY_DIR}/${BF_BUILD_TYPE}/minimum_writer${BF_EXE_SUFFIX}"
  POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
  "${CMAKE_BINARY_DIR}/${BF_BUILD_TYPE}/minimum_writer${BF_EXE_SUFFIX}"
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/minimum_writer${BF_EXE_SUFFIX}"
  VERBATIM
)
install(FILES
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/minimum_writer${BF_EXE_SUFFIX}"
  DESTINATION "${BioFormatsImageIO_DIST_DIR}"
)

#copy showinf
add_custom_command(
  TARGET showinf
  DEPENDS "${CMAKE_BINARY_DIR}/${BF_BUILD_TYPE}/showinf${BF_EXE_SUFFIX}"
  POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
  "${CMAKE_BINARY_DIR}/${BF_BUILD_TYPE}/showinf${BF_EXE_SUFFIX}"
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/showinf${BF_EXE_SUFFIX}"
  VERBATIM
)
install(FILES
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/showinf${BF_EXE_SUFFIX}"
  DESTINATION "${BioFormatsImageIO_DIST_DIR}"
)

#copy libbfcpp.dylib
add_custom_command(
  TARGET bfcpp
  DEPENDS "${CMAKE_BINARY_DIR}/${BF_BUILD_TYPE}/${BF_LIB_PREFIX}bfcpp${BF_SUFFIX}"
  POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
  "${CMAKE_BINARY_DIR}/${BF_BUILD_TYPE}/${BF_LIB_PREFIX}bfcpp${BF_SUFFIX}"
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/${BF_LIB_PREFIX}bfcpp${BF_SUFFIX}"
  VERBATIM
)
install(FILES
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/${BF_LIB_PREFIX}bfcpp${BF_SUFFIX}"
  DESTINATION "${BioFormatsImageIO_DIST_DIR}"
)

# copy jace_runtime.jar
add_custom_command(
  TARGET bfcpp
  DEPENDS "${CMAKE_BINARY_DIR}/../jace-runtime.jar"
  POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
  "${CMAKE_BINARY_DIR}/../jace-runtime.jar"
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/jace-runtime.jar"
  VERBATIM
)
install(FILES
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/jace-runtime.jar"
  DESTINATION "${BioFormatsImageIO_DIST_DIR}"
)

# copy loci_tools.jar
add_custom_command(
  TARGET bfcpp
  DEPENDS "${BioFormatsImageIO_ARTIFACT_DIR}/loci_tools.jar"
  POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
  "${BioFormatsImageIO_ARTIFACT_DIR}/loci_tools.jar"
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/loci_tools.jar"
  VERBATIM
)
install(FILES
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/loci_tools.jar"
  DESTINATION "${BioFormatsImageIO_DIST_DIR}"
)

# generate extension list
add_custom_command(
  TARGET bfcpp
  DEPENDS "${BioFormatsImageIO_ARTIFACT_DIR}/loci_tools.jar"
  POST_BUILD
  COMMAND ${Java_JAVA_EXECUTABLE} -cp ${BioFormatsImageIO_ARTIFACT_DIR}/loci_tools.jar
  "loci.formats.tools.BioFormatsExtensionPrinter"
  VERBATIM
)

# copy extensions to dist dir
add_custom_command(
  TARGET bfcpp
  DEPENDS "${CMAKE_BINARY_DIR}/BioFormatsSuffixes.txt"
  POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
  "${CMAKE_BINARY_DIR}/BioFormatsSuffixes.txt"
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/BioFormatsSuffixes.txt"
  VERBATIM
)
install(FILES
  "${CMAKE_BINARY_DIR}/${BioFormatsImageIO_DIST_DIR}/BioFormatsSuffixes.txt"
  DESTINATION "${BioFormatsImageIO_DIST_DIR}"
)

SET(CPACK_PACKAGE_FILE_NAME "bf-itk")
SET(CPACK_GENERATOR "TGZ;ZIP")
INCLUDE( CPack )
