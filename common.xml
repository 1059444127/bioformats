<!--
common.xml

Ant build file for logic common to every component.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project>
  <property file="${user.home}/.ant-global.properties"/>
  <property file="${root.dir}/global.properties"/>
  <property file="${root.dir}/common.properties"/>

  <condition property="isUnix"><os family="unix"/></condition>

  <!-- Non-core ant tasks -->

  <!-- NB - We do not reference ${artifact.dir}/loci-checks.jar directly,
    as doing so causes loci-checks.jar to be locked by some file systems
    (Windows in particular), which causes the clean and clean-jars targets
    to fail. -->
  <taskdef resource="checkstyletask.properties"
    classpath="${lib.dir}/checkstyle-all-4.2.jar:${lib.dir}/loci-checks.jar"/>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties"
    classpath="${lib.dir}/ant-contrib-1.0b1.jar"/>
  <!-- HACK - some environments do not install the antcontrib tasks properly
  from antcontrib.properties above; also load them from antlib.xml -->
  <taskdef resource="net/sf/antcontrib/antlib.xml"
    classpath="${lib.dir}/ant-contrib-1.0b1.jar"/>

  <taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties"
    classpath="${lib.dir}/findbugs-ant.jar"/>

  <!--
  <taskdef resource="proguard/ant/task.properties"
    classpath="${lib.dir}/proguard.jar"/>
  -->

  <!-- Main build targets -->

  <target name="dev-compile" description="compile classes in-place (no copy)">
    <javac debug="true" deprecation="true"
      source="${component.java-version}"
      target="${component.java-version}"
      srcdir="${src.dir}" destdir="${src.dir}"
      classpath="${component.classpath}"
      includes="${component.source}"/>
  </target>

  <target name="dev-clean" description="remove classes in-place (no copy)">
    <delete>
      <fileset dir="${src.dir}" includes="**/*.class"/>
    </delete>
  </target>

  <target name="compile" depends="copy-source"
    description="compile classes">
    <javac debug="true" deprecation="true"
      source="${component.java-version}"
      target="${component.java-version}"
      srcdir="${dest.dir}" destdir="${classes.dir}"
      classpath="${component.classpath}"
      includes="${component.source}"/>
  </target>

  <!-- CTR TODO FINISH THIS
  <target name="exec" depends="compile" description="execute package">
     <java classname="component.manifest-main"
       classpath="${}"
  </target>
  -->

  <target name="findbugs" depends="compile"
    description="check source code for bugs">
    <if>
      <isset property="findbugs.home"/>
      <then>
        <findbugs home="${findbugs.home}" jvmargs="-Xmx512m"
          output="xml" outputFile="${build.dir}/findbugs.xml">
          <auxClasspath path="${component.classpath}"/>
          <sourcePath path="${dest.dir}"/>
          <class location="${classes.dir}"/>
        </findbugs>
        <java jar="${findbugs.home}/findbugs.jar" fork="true">
          <arg value="${build.dir}/findbugs.xml"/>
        </java>
      </then>
      <else>
        <echo>Please set the findbugs.home property to point to your</echo>
        <echo>FindBugs installation's lib directory. E.g.:</echo>
        <echo>  ant -Dfindbugs.home=${user.home}/findbugs/lib findbugs</echo>
      </else>
    </if>
  </target>

  <target name="style" depends="compile"
    description="check source code style">
    <checkstyle config="${root.dir}/checkstyle.xml" failOnViolation="false"
      classpath="${classes.dir}:${component.classpath}">
      <fileset dir="${dest.dir}" includes="${component.source}"/>
    </checkstyle>
  </target>

  <target name="jar" depends="compile"
    description="generate JAR file">
    <mkdir dir="${artifact.dir}"/>
    <jar jarfile="${artifact.dir}/${component.jar}" basedir="${classes.dir}">
      <manifest>
        <attribute name="Main-Class" value="${component.manifest-main}"/>
        <attribute name="Class-Path" value="${component.manifest-cp}"/>
      </manifest>
    </jar>
  </target>

  <target name="docs" depends="compile"
    description="generate javadocs">
    <javadoc sourcepath="${dest.dir}" destdir="${docs.dir}/api"
      classpath="${component.classpath}:${classes.dir}"
      author="true" version="true" use="true"
      nodeprecated="true" windowtitle="Bio-Formats API">
      <packageset dir="${dest.dir}"/>
      <doctitle><![CDATA[<h1>Bio-Formats</h1>]]></doctitle>
      <bottom><![CDATA[${copyright.begin} ${YEAR} ${copyright.end}]]></bottom>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
      <link href="http://hudson.openmicroscopy.org.uk/job/OMEJAVA/javadoc/"/>
      <link href="http://rsbweb.nih.gov/ij/developer/api/"/>
      <link href="http://www.ssec.wisc.edu/~dglo/docs/"/>
      <!--<link href="http://www.jdocs.com/formlayout/1.0.4/api/"/>-->
      <!--<link href="http://www.jdocs.com/looks/1.2.2/api/"/>-->
    </javadoc>
  </target>

  <target name="clean" description="remove all build files except artifacts">
    <delete dir="${build.dir}"/>
  </target>

  <target name="clean-classes" description="remove classes from build folder">
    <delete dir="${classes.dir}"/>
  </target>

  <target name="clean-dist"
    description="remove distribution bundles from build folder">
    <delete dir="${dist.dir}"/>
  </target>

  <target name="clean-docs" description="remove javadocs from build folder">
    <delete dir="${docs.dir}"/>
  </target>

  <target name="clean-src" description="remove source files from build folder">
    <delete dir="${dest.dir}"/>
  </target>

  <target name="clean-jar" description="remove JAR file from artifacts folder">
    <delete>
      <fileset dir="${artifact.dir}" includes="${component.jar}"/>
    </delete>
  </target>

  <!-- Internal build targets -->

  <target name="init">
    <tstamp>
      <format property="DATE" pattern="d MMMMM yyyy"/>
      <format property="YEAR" pattern="yyyy"/>
    </tstamp>
    <!-- determine SVN revision number -->
    <if>
      <isset property="svn.revision"/>
      <else>
        <!--
        Thanks to Chris Collins for this code snippet:
          http://ccollins.wordpress.com/2008/01/30/
            getting-subversion-revision-in-ant/
        -->
        <property name="revision" value="HEAD"/>
        <exec executable="svn" outputproperty="svn.log"
          failifexecutionfails="false">
          <arg line="info ${base.dir} -r ${revision}"/>
        </exec>
        <if>
          <isset property="svn.log"/>
          <then>
            <!--<echo>${svn.log}</echo>-->
            <propertyregex property="svn.revision"
              input="${svn.log}" select="\1">
              <regexp pattern="Revision: ([0-9]*)"/>
            </propertyregex>
            <echo>SVN revision: ${svn.revision}</echo>
          </then>
        </if>
      </else>
    </if>
  </target>

  <target name="copy-source" depends="init">
    <!-- copy binary resources without filtering -->
    <copy todir="${dest.dir}" preservelastmodified="true">
      <fileset dir="${src.dir}" includes="${component.resources-bin}"/>
    </copy>
    <!-- copy source files and text resources with filtering -->
    <filter token="date" value="${DATE}"/>
    <filter token="year" value="${YEAR}"/>
    <filter token="svn.revision" value="${svn.revision}"/>
    <filter token="visbio.version" value="${visbio.version}"/>
    <copy todir="${dest.dir}" filtering="true" preservelastmodified="true">
      <fileset dir="${src.dir}"
        includes="${component.source} ${component.resources-text}"/>
    </copy>
    <!-- copy resources to classes folder -->
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${dest.dir}" excludes="${component.source}"/>
    </copy>
  </target>

</project>
